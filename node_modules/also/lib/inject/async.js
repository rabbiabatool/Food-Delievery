// Generated by CoffeeScript 1.6.3
var Defer, argsOf, sequence;

argsOf = require('../util').argsOf;

Defer = require('when').defer;

sequence = require('when/sequence');

module.exports = function(Preparator, decoratedFn) {
  var seq, _id;
  seq = 0;
  _id = seq;
  if (typeof Preparator === 'function' && typeof decoratedFn === 'undefined') {
    decoratedFn = Preparator;
    Preparator = {};
  }
  if (typeof Preparator !== 'object' || Preparator instanceof Array) {
    throw new Error('also.inject.async(Preparator, decoratedFn) requires Preparator as object');
  }
  if (Preparator.parallel == null) {
    Preparator.parallel = true;
  }
  if (Preparator.context == null) {
    Preparator.context = this;
  }
  Preparator.onError;
  return (function(context, beforeAllDone) {
    var beforeAll, calls, errorHandler, queue, queueRemainingLength, running;
    context.signature = argsOf(decoratedFn);
    queue = [];
    calls = [];
    running = false;
    queueRemainingLength = function() {
      var call, item, length, _i, _j, _len, _len1;
      length = 0;
      if (Preparator.parallel) {
        for (_i = 0, _len = queue.length; _i < _len; _i++) {
          item = queue[_i];
          if (!item.done) {
            length++;
          }
        }
      } else {
        for (_j = 0, _len1 = calls.length; _j < _len1; _j++) {
          call = calls[_j];
          length++;
        }
      }
      return length;
    };
    errorHandler = function(defer, error) {
      var done;
      if (typeof Preparator.onError !== 'function') {
        return defer.reject(error);
      }
      done = function(result) {
        if (result instanceof Error) {
          return defer.reject(result);
        }
        return defer.resolve(result);
      };
      return Preparator.onError(done, context, error);
    };
    beforeAll = function() {
      var defer, done;
      defer = Defer();
      if (beforeAllDone) {
        return defer.resolve();
      }
      if (typeof Preparator.beforeAll !== 'function') {
        return defer.resolve();
      }
      beforeAllDone = true;
      done = function(result) {
        if (result instanceof Error) {
          return errorHandler(defer, result);
        }
        return defer.resolve(result);
      };
      Preparator.beforeAll(done, context);
      return defer.promise;
    };
    Object.defineProperty(context, 'args', {
      enumerable: true,
      get: function() {
        try {
          return queue[_id].args;
        } catch (_error) {}
      }
    });
    Object.defineProperty(context, 'defer', {
      enumerable: true,
      get: function() {
        queue[_id].altDefer = true;
        try {
          return queue[_id].defer;
        } catch (_error) {}
      }
    });
    Object.defineProperty(context, 'first', {
      enumerable: true,
      get: function() {
        try {
          return queue[_id].first;
        } catch (_error) {}
      }
    });
    Object.defineProperty(context, 'last', {
      enumerable: true,
      get: function() {
        try {
          return queue[_id].last;
        } catch (_error) {}
      }
    });
    Object.defineProperty(context, 'queue', {
      enumerable: true,
      get: function() {
        return {
          remaining: queueRemainingLength(),
          elements: queue,
          current: _id
        };
      }
    });
    Object.defineProperty(context, 'current', {
      enumerable: true,
      get: function() {
        return queue[_id];
      }
    });
    Object.defineProperty(context, 'skip', {
      enumerable: true,
      get: function() {
        return function() {
          return queue[_id].skip = true;
        };
      }
    });
    return function() {
      var finished, fn, run;
      finished = Defer();
      fn = function(finished, args) {
        var afterAll, afterEach, arg, beforeEach, callDecoratedFn, id, inject, resolver, _i, _len;
        id = seq++;
        inject = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          inject.push(arg);
        }
        resolver = function(result) {
          _id = id;
          if (result instanceof Error) {
            return queue[id].defer.reject(result);
          }
          finished.notify({
            result: result
          });
          return queue[id].defer.resolve(result);
        };
        queue[id] = {
          done: false,
          defer: Defer(),
          altDefer: false,
          first: [],
          last: [],
          args: inject
        };
        beforeEach = function() {
          var defer, done;
          defer = Defer();
          if (typeof Preparator.beforeEach !== 'function') {
            return defer.resolve();
          }
          done = function(result) {
            finished.notify({
              beforeEach: result
            });
            if (result instanceof Error) {
              return errorHandler(defer, result);
            }
            return defer.resolve(result);
          };
          _id = id;
          Preparator.beforeEach(done, context);
          return defer.promise;
        };
        callDecoratedFn = function() {
          var element;
          _id = id;
          element = queue[id];
          if (element.skip) {
            return element.defer.resolve();
          }
          process.nextTick(function() {
            var error;
            try {
              if (element.altDefer) {
                return decoratedFn.apply(Preparator.context, element.first.concat(inject).concat(element.last));
              } else {
                return decoratedFn.apply(Preparator.context, [resolver].concat(element.first.concat(inject).concat(element.last)));
              }
            } catch (_error) {
              error = _error;
              return errorHandler(element.defer, error);
            }
          });
          return element.defer.promise;
        };
        afterEach = function() {
          var defer, done;
          _id = id;
          defer = Defer();
          if (typeof Preparator.afterEach !== 'function') {
            return defer.resolve();
          }
          done = function(result) {
            finished.notify({
              afterEach: result
            });
            if (result instanceof Error) {
              return errorHandler(defer, result);
            }
            return defer.resolve(result);
          };
          Preparator.afterEach(done, context);
          return defer.promise;
        };
        afterAll = function() {
          var defer, done;
          _id = id;
          defer = Defer();
          queue[id].done = true;
          if (queueRemainingLength() !== 0) {
            return defer.resolve();
          }
          if (typeof Preparator.afterAll !== 'function') {
            queue.length = 0;
            return defer.resolve();
          }
          done = function(result) {
            _id = -1;
            queue.length = 0;
            if (result instanceof Error) {
              return errorHandler(defer, result);
            }
            return defer.resolve(result);
          };
          _id = -1;
          Preparator.afterAll(done, context);
          return defer.promise;
        };
        sequence([beforeAll, beforeEach, callDecoratedFn, afterEach, afterAll]).then(function(results) {
          return finished.resolve(results[2]);
        }, function(error) {
          return finished.reject(error);
        }, function(status) {
          return finished.notify(status);
        });
        return finished.promise;
      };
      if (!Preparator.parallel) {
        calls.push({
          "function": fn,
          finished: finished,
          "arguments": arguments
        });
        run = function() {
          var call;
          running = true;
          call = calls.shift();
          if (call == null) {
            running = false;
            return;
          }
          return call["function"](call.finished, call["arguments"]).then(function() {
            return run();
          }, function() {
            return run();
          });
        };
        if (!running) {
          run();
        }
        return finished.promise;
      }
      if (Preparator.parallel) {
        return fn(finished, arguments);
      }
    };
  })(function() {}, false);
};

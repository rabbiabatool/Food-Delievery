// Generated by CoffeeScript 1.6.3
var argsOf,
  __slice = [].slice;

argsOf = require('../util').argsOf;

module.exports = function() {
  var Preparator, address, args, decoratedFn, remains, signature, _i, _ref;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  remains = 2 <= args.length ? __slice.call(args, 0, _i = args.length - 1) : (_i = 0, []), decoratedFn = args[_i++];
  _ref = remains, Preparator = _ref[0], remains = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
  Preparator || (Preparator = {});
  address = Preparator.$address || '';
  signature = argsOf(decoratedFn);
  return function() {
    var argName, field, missing, position;
    missing = ((function() {
      var _results;
      _results = [];
      for (argName in Preparator) {
        if (argName.match(/^\$/)) {
          continue;
        }
        position = signature.indexOf(argName);
        if (!arguments[position]) {
          throw new Error("" + address + "(" + signature + ") expects " + argName);
        }
        _results.push(((function() {
          var _results1;
          _results1 = [];
          for (field in Preparator[argName]) {
            if (Preparator[argName][field].$default != null) {
              if (arguments[position][field] == null) {
                arguments[position][field] = Preparator[argName][field].$default;
              }
              continue;
            }
            if (field.match(/^\$/)) {
              continue;
            }
            if (arguments[position][field] != null) {
              continue;
            }
            if (Preparator[argName][field].$required != null) {
              if (!Preparator[argName][field].$required) {
                continue;
              }
            }
            _results1.push(field);
          }
          return _results1;
        }).apply(this, arguments)).map(function(f) {
          return "" + argName + "." + f;
        }).join(', '));
      }
      return _results;
    }).apply(this, arguments)).filter(function(f) {
      var e;
      e = f[0];
      return e != null;
    }).join(' and ');
    if (missing) {
      throw new Error("" + address + "(" + signature + ") expects " + missing);
    }
    return decoratedFn.apply(this, arguments);
  };
};

// Generated by CoffeeScript 1.6.3
var compile, file, fs, join, path, program, util;

program = require('commander');

fs = require('fs');

join = require('path').join;

compile = require('coffee-script').compile;

util = require('also').util;

program.version(JSON.parse(fs.readFileSync(__dirname + '/../package.json'), 'utf8').version);

program.option('-f, --file [file]', 'Run file.');

file = program.parse(process.argv).file;

if (file[0] !== '/') {
  path = join(process.cwd(), file);
}

module.exports.run = function() {
  var actionRunner, ipso, list, tag, _ref;
  _ref = require('ipso').components(), ipso = _ref.ipso, tag = _ref.tag;
  if (path.match(/\.coffee$/)) {
    list = eval(compile(fs.readFileSync(path, 'utf8'), {
      bare: true
    }));
  } else if (path.match(/\.js$/)) {
    list = eval("list = { " + (fs.readFileSync(path, 'utf8')) + " }");
  }
  actionRunner = function(text, fn) {
    var decorated;
    decorated = ipso(fn);
    return decorated(function(result) {
      if (result instanceof Error) {
        return console.log(result.stack);
      }
    });
  };
  try {
    if (typeof list.before.all === 'function') {
      actionRunner('before all', list.before.all);
    }
  } catch (_error) {}
  return setInterval((function() {
    var fn, text, _results;
    try {
      if (typeof list.before.each === 'function') {
        actionRunner('before each', list.before.each);
      }
    } catch (_error) {}
    _results = [];
    for (text in list) {
      if (text === 'before') {
        continue;
      }
      fn = list[text];
      _results.push(actionRunner(text, fn));
    }
    return _results;
  }), 1000);
};

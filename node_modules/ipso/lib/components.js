// Generated by CoffeeScript 1.6.3
var fs, path, util,
  __slice = [].slice;

fs = require('fs');

path = require('path');

util = require('also').util;

module.exports = function(ipso) {
  return function() {
    var aliases, arg, args, compomnentsRoot, component, componentDir, componentFile, decoratedFn, err, error, fn, list, resolver, _i, _j, _len, _len1, _ref;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      fn = arg;
    }
    ipso.does.config({
      mode: 'bridge'
    });
    compomnentsRoot = path.join(process.cwd(), 'components');
    list = {};
    aliases = {};
    try {
      _ref = fs.readdirSync(compomnentsRoot);
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        componentDir = _ref[_j];
        componentFile = path.join(compomnentsRoot, componentDir, 'component.json');
        try {
          component = JSON.parse(fs.readFileSync(componentFile));
          list[component.name] = function() {};
          aliases[component.name] = path.join(compomnentsRoot, componentDir, component.main || 'index.js');
          if ((component.inject != null) && (component.inject.alias != null)) {
            list[component.inject.alias] = function() {};
            aliases[component.inject.alias] = path.join(compomnentsRoot, componentDir, component.main || 'index.js');
          }
        } catch (_error) {
          error = _error;
          console.log("ipso: error loading component: " + componentFile);
        }
      }
    } catch (_error) {
      err = _error;
      switch (err.errno) {
        case 3:
          console.log("ipso: could not access directory: " + compomnentsRoot);
          break;
        case 34:
          console.log("ipso: expected directory: " + compomnentsRoot);
          break;
        default:
          console.log("ipso: unexpected error reading directory: " + compomnentsRoot);
      }
    }
    ipso.define(list, {
      aliases: aliases
    });
    if (typeof fn === 'function') {
      decoratedFn = ipso(fn);
      decoratedFn(resolver = function(result) {
        if (result != null) {
          return console.log(result);
        }
      });
    }
    return ipso;
  };
};
